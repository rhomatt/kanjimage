{"version":3,"sources":["component/Imagebox.js","component/App.js","reportWebVitals.js","index.js"],"names":["Imagebox","useState","image","setImage","pasteHandler","event","items","clipboardData","blob","i","length","item","console","log","type","getAsFile","reader","FileReader","onload","result","target","readAsDataURL","useEffect","document","addEventListener","undefined","src","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wNA0CeA,MAxCf,WAAoB,IAAD,EACWC,mBAAS,MADpB,mBACRC,EADQ,KACDC,EADC,KAGTC,EAAe,SAACC,GAId,IAHA,IAAMC,EAAQD,EAAME,cAAcD,MAE9BE,EAAO,KACHC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAAI,CACjC,IAAIE,EAAOL,EAAMG,GAEjB,GADAG,QAAQC,IAAIF,GACK,cAAdA,EAAKG,KAAqB,CACzBN,EAAOG,EAAKI,YACZ,OAIZ,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAACb,GACb,IAAIc,EAASd,EAAMe,OAAOD,OAC1BP,QAAQC,IAAIM,GACZhB,EAASgB,IAGVX,GACCQ,EAAOK,cAAcb,IAQ7B,OAJAc,qBAAU,WACNC,SAASC,iBAAiB,QAASpB,KACpC,IAGC,qCACCF,OAAQuB,EAAY,WACrB,qBAAKC,IAAKxB,QC1BHyB,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACI,cAAC,EAAD,OCMOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjB,SAASkB,eAAe,SAM1BZ,M","file":"static/js/main.26ac4925.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\n\nfunction Imagebox(){\n    const [image, setImage] = useState(null);\n\n    const pasteHandler = (event) => {\n            const items = event.clipboardData.items;\n\n            var blob = null;\n            for(var i = 0; i < items.length; i++){ // get the first image\n                let item = items[i];\n                console.log(item);\n                if(item.type === 'image/png'){\n                    blob = item.getAsFile();\n                    break;\n                }\n            }\n\n        var reader = new FileReader();\n        reader.onload = (event) => {\n            let result = event.target.result\n            console.log(result);\n            setImage(result);\n        };\n\n        if(blob) // should be null if not an image\n            reader.readAsDataURL(blob);\n\n    };\n\n    useEffect(() => {\n        document.addEventListener('paste', pasteHandler);\n    }, []);\n\n    return(\n        <>\n        {image ? undefined : 'no image'}\n        <img src={image}/>\n        </>\n    );\n}\n\nexport default Imagebox;\n","import './App.css';\r\nimport Imagebox from './Imagebox.js'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Imagebox/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}