{"version":3,"sources":["component/Button.js","component/RangeSlider.js","component/SearchOptions.js","logic/handleFiles.js","component/Dropzone.js","logic/processImage.js","component/Imagebox.js","component/App.js","reportWebVitals.js","index.js"],"names":["Button","props","clickHandler","text","onClick","RangeSlider","min","max","value","slideHandler","className","type","onInput","SearchOptions","useState","name","url","searchSites","map","site","href","handleFiles","items","setImage","blob","i","length","item","console","log","match","getAsFile","reader","FileReader","onload","event","a","arrayBuffer","buff","base64","target","result","readAsDataURL","Dropzone","onDragOver","preventDefault","onDrop","dataTransfer","render","id","src","alt","Lena","require","processImage","buffer","Jimp","read","image","fx","bitmap","width","fy","height","resize","RESIZE_BICUBIC","getBase64Async","AUTO","getBufferAsync","error","gaussian","radius","blur","element","amt","canvas","document","createElement","filter","pixels","filterImage","toDataURL","blobber","Promise","resolve","reject","toBlob","color","apply","params","greyscale","invert","Tesseract","recognize","data","replace","Imagebox","setText","threshold","setThreshold","saturation","setSaturation","handlePaste","clipboardData","useEffect","addEventListener","PI","then","enlargeClick","enlargeImage","newimage","blurClick","thresholdClick","getElementById","saturationClick","saturate","greyscaleClick","invertClick","undefined","parseInt","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.a6f0857a.chunk.js","sourcesContent":["\nfunction Button(props){\n    const {clickHandler, text} = props;\n\n    return(\n        <div>\n        <button onClick={clickHandler}>\n        {text}\n        </button>\n        </div>\n    );\n}\n\nexport default Button;\n","\nfunction RangeSlider(props){\n    const {min, max, value, slideHandler} = props;\n    return(\n        <>\n        <input className=\"slider\" type=\"range\" min={min} max={max} onInput={slideHandler}/>\n        {value}\n        </>\n    );\n}\n\nexport default RangeSlider;\n","import {useState, useEffect} from 'react';\nimport Button from './Button.js';\n\nfunction SearchOptions(props){\n    const {text} = props;\n    const [searchSites, setSearchSites] = useState([\n        { name: \"jisho\", url: \"https://jisho.org/search/\" },\n        { name: \"weblio\", url: \"https://www.weblio.jp/content/\" }\n    ]); // default search sites. idea being the user can add their own\n\n    if(!text)\n        return null;\n\n    return(\n        <ul>\n        {searchSites.map(site => {\n            return <li><a href={site.url+text}>{site.name}</a></li>\n        })}\n        </ul>\n    );\n}\n\nexport default SearchOptions;\n","\r\nconst handleFiles = (items, setImage) => {\r\n    var blob;\r\n    for(var i = 0; i < items.length; i++){ // get the first image\r\n        let item = items[i];\r\n        console.log(item);\r\n        if(item.type.match(/image\\/.*/)){\r\n            blob = item.getAsFile();\r\n            break;\r\n        }\r\n    }\r\n\r\n    var reader = new FileReader();\r\n    reader.onload = async event => {\r\n        const buff = await blob.arrayBuffer();\r\n        setImage({buff, base64: event.target.result})\r\n    };\r\n\r\n    if(blob) // should be null if not an image\r\n        reader.readAsDataURL(blob);\r\n}\r\n\r\nexport default handleFiles;\r\n","import './Dropzone.css';\nimport handleFiles from '../logic/handleFiles.js';\n\nfunction Dropzone(props){\n    const dropHandler = (event) => {\n        console.log('File dropped');\n        event.preventDefault();\n        const items = event.dataTransfer.items;\n\n        handleFiles(items, props.setImage);\n    }\n\n    const dragOver = (event) => { event.preventDefault(); } // Need this for the drop to work\n\n    // img must have id to be able to pass document element to LenaJS\n    return(\n        <div\n            className='dropzone'\n            onDragOver={dragOver}\n            onDrop={dropHandler}>\n                {props.render() ? null : 'Paste image from clipboard or drag and drop here'}\n                <img id=\"image\" src={props.render()} alt=''/>\n        </div>\n    );\n}\n\nexport default Dropzone;\n","import Tesseract from 'tesseract.js'\r\nimport Jimp from 'jimp';\r\nconst Lena = require('lena.js');\r\n\r\nvar processImage = {};\r\n\r\n// increase image size\r\n// double size for now. work on resizing by a factor later\r\nprocessImage[\"enlargeImage\"] = async function(buffer){\r\n    try{\r\n        var image = await Jimp.read(buffer);\r\n        const fx = image.bitmap.width * 2,\r\n            fy = image.bitmap.height * 2;\r\n        console.log(image);\r\n        image.resize(fx, fy, Jimp.RESIZE_BICUBIC);\r\n        //var uri = image.write(\"./temp\", error => console.error(error));\r\n        const base64 = await image.getBase64Async(Jimp.AUTO);\r\n        const buff = await image.getBufferAsync(Jimp.AUTO);\r\n\r\n        return {buff, base64};\r\n    }\r\n    catch(error){\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nprocessImage[\"blur\"] = async function(buffer, gaussian){\r\n    const radius = 1;\r\n    try{\r\n        var image = await Jimp.read(buffer);\r\n        if(gaussian)\r\n            image.gaussian(radius);\r\n        else\r\n            image.blur(radius);\r\n\r\n        const base64 = await image.getBase64Async(Jimp.AUTO);\r\n        const buff = await image.getBufferAsync(Jimp.AUTO);\r\n\r\n        return {buff, base64};\r\n    }\r\n    catch(error){\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n// must be passed a document element\r\n// there is probably a better way to do this\r\nprocessImage[\"threshold\"] = async function(element, amt=128){\r\n    var canvas = document.createElement(\"canvas\");\r\n    console.log(canvas);\r\n    const filter = (pixels) => Lena[\"thresholding\"](pixels, amt);\r\n\r\n    Lena.filterImage(canvas, filter, element);\r\n    const base64 = canvas.toDataURL(\"image/png\");\r\n\r\n    // if I don't wrap this thing in a promise it refuses to work\r\n    const blobber = new Promise((resolve, reject) => {\r\n        canvas.toBlob(blob => {\r\n            console.log(1, blob);\r\n            resolve(blob);\r\n        });\r\n    });\r\n\r\n    const blob = await blobber;\r\n\r\n    console.log(2, blob);\r\n    const buff = await blob.arrayBuffer();\r\n\r\n    return {buff, base64};\r\n}\r\n\r\nprocessImage[\"saturate\"] = async function(buffer, amt=50){\r\n    try{\r\n        var image = await Jimp.read(buffer);\r\n        image.color([\r\n            { apply: 'saturate', params: [amt]}\r\n        ]);\r\n        const base64 = await image.getBase64Async(Jimp.AUTO);\r\n        const buff = await image.getBufferAsync(Jimp.AUTO);\r\n\r\n        return {buff, base64};\r\n    }\r\n    catch(error){\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nprocessImage[\"greyscale\"] = async function(buffer){\r\n    try{\r\n        var image = await Jimp.read(buffer);\r\n        image.greyscale();\r\n        const base64 = await image.getBase64Async(Jimp.AUTO);\r\n        const buff = await image.getBufferAsync(Jimp.AUTO);\r\n\r\n        return {buff, base64};\r\n    }\r\n    catch(error){\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n\r\nprocessImage[\"invert\"] = async function(buffer){\r\n    try{\r\n        var image = await Jimp.read(buffer);\r\n        image.invert();\r\n        const base64 = await image.getBase64Async(Jimp.AUTO);\r\n        const buff = await image.getBufferAsync(Jimp.AUTO);\r\n\r\n        return {buff, base64};\r\n    }\r\n    catch(error){\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nprocessImage[\"recognize\"] = async function(base64){\r\n    console.log('processing...');\r\n    var data = await Tesseract.recognize(base64, 'jpn');\r\n    var text = data.data.text;\r\n    text = text.replace(/\\s+/g, '');\r\n    return text;\r\n}\r\n\r\nexport default processImage;\r\n","import {useState, useEffect} from 'react';\r\nimport Button from './Button.js';\r\nimport RangeSlider from './RangeSlider.js';\r\nimport SearchOptions from './SearchOptions.js';\r\nimport Dropzone from './Dropzone.js';\r\nimport handleFiles from '../logic/handleFiles.js';\r\nimport PI from '../logic/processImage.js';\r\n\r\nfunction Imagebox(){\r\n    const [image, setImage] = useState({buff: null, base64: null}); // image metadata\r\n    const [text, setText] = useState('');\r\n    const [threshold, setThreshold] = useState(128); // threshold amount for black/white\r\n    const [saturation, setSaturation] = useState(50); // saturation amount\r\n\r\n    const handlePaste = (event) =>{\r\n        const items = event.clipboardData.items;\r\n        console.log(items);\r\n        handleFiles(items, setImage);\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('paste', handlePaste);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(image.base64){\r\n            setText('Loading...');\r\n\r\n            PI.recognize(image.base64)\r\n                .then(text => {\r\n                    console.log(text);\r\n                    setText(text)\r\n                });\r\n        }\r\n    }, [image]);\r\n\r\n    const enlargeClick = async () => {\r\n        if(!image.buff)\r\n            return;\r\n        var newimage = await PI.enlargeImage(image.buff);\r\n        setImage(newimage);\r\n    };\r\n\r\n    const blurClick = async () => {\r\n        if(!image.buff)\r\n            return;\r\n        var newimage = await PI.blur(image.buff, true);\r\n        setImage(newimage);\r\n    }\r\n\r\n    const thresholdClick = async () => {\r\n        const image = document.getElementById(\"image\");\r\n        var newimage = await PI.threshold(image, threshold);\r\n        setImage(newimage);\r\n    }\r\n\r\n    const thresholdSlide= (event) => {\r\n        setThreshold(parseInt(event.target.value));\r\n    }\r\n\r\n    const saturationClick = async () => {\r\n        if(!image.buff)\r\n            return;\r\n        var newimage = await PI.saturate(image.buff, saturation);\r\n        setImage(newimage);\r\n    }\r\n\r\n    const saturationSlide = (event) => {\r\n        setSaturation(parseInt(event.target.value));\r\n        console.log(saturation);\r\n    }\r\n\r\n    const greyscaleClick = async () => {\r\n        if(!image.buff)\r\n            return;\r\n        var newimage = await PI.greyscale(image.buff);\r\n        setImage(newimage);\r\n    }\r\n\r\n    const invertClick = async () => {\r\n        if(!image.buff)\r\n            return;\r\n        var newimage = await PI.invert(image.buff);\r\n        setImage(newimage);\r\n    }\r\n\r\n    return(\r\n        <>\r\n        {image.base64 ? undefined : 'no image'}\r\n        <Dropzone render={() => image.base64} setImage={(image) => setImage(image)}/>\r\n\r\n        <Button clickHandler={enlargeClick} text=\"Enlarge by x2\"/>\r\n\r\n        <Button clickHandler={blurClick} text=\"Gausian blur\"/>\r\n\r\n        <RangeSlider min={0} max={255} value={threshold} slideHandler={thresholdSlide}/>\r\n        <Button clickHandler={thresholdClick} text=\"threshold\"/>\r\n\r\n        <RangeSlider min={0} max={100} value={saturation} slideHandler={saturationSlide}/>\r\n        <Button clickHandler={saturationClick} text=\"saturation\"/>\r\n\r\n        <Button clickHandler={greyscaleClick} text=\"greyscale\"/>\r\n\r\n        <Button clickHandler={invertClick} text=\"invert\"/>\r\n\r\n        {text}\r\n        <SearchOptions text={text}/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Imagebox;\r\n","import './App.css';\r\nimport Imagebox from './Imagebox.js'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Imagebox/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}