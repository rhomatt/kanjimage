{"version":3,"sources":["component/Button.js","logic/handleFiles.js","component/Dropzone.js","logic/processImage.js","component/Imagebox.js","component/App.js","reportWebVitals.js","index.js"],"names":["Button","props","clickHandler","text","onClick","handleFiles","items","setImage","blob","i","length","item","console","log","type","match","getAsFile","reader","FileReader","onload","event","a","arrayBuffer","buff","base64","target","result","readAsDataURL","Dropzone","className","onDragOver","preventDefault","onDrop","dataTransfer","render","src","alt","enlargeImage","buffer","Jimp","read","image","fx","bitmap","width","fy","height","resize","RESIZE_BICUBIC","getBase64Async","AUTO","getBufferAsync","error","Tesseract","recognize","data","Imagebox","useState","setText","handlePaste","clipboardData","useEffect","document","addEventListener","then","enlargeClick","newimage","undefined","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.52b80e83.chunk.js","sourcesContent":["\nfunction Button(props){\n    const {clickHandler, text} = props;\n\n    return(\n        <div>\n        <button onClick={clickHandler}>\n        {text}\n        </button>\n        </div>\n    );\n}\n\nexport default Button;\n","\r\nconst handleFiles = (items, setImage) => {\r\n    var blob;\r\n    for(var i = 0; i < items.length; i++){ // get the first image\r\n        let item = items[i];\r\n        console.log(item);\r\n        if(item.type.match(/image\\/.*/)){\r\n            blob = item.getAsFile();\r\n            break;\r\n        }\r\n    }\r\n\r\n    var reader = new FileReader();\r\n    reader.onload = async event => {\r\n        const buff = await blob.arrayBuffer();\r\n        setImage({buff, base64: event.target.result})\r\n    };\r\n\r\n    if(blob) // should be null if not an image\r\n        reader.readAsDataURL(blob);\r\n}\r\n\r\nexport default handleFiles;\r\n","import './Dropzone.css';\nimport handleFiles from '../logic/handleFiles.js';\n\nfunction Dropzone(props){\n    const dropHandler = (event) => {\n        console.log('File dropped');\n        event.preventDefault();\n        const items = event.dataTransfer.items;\n\n        handleFiles(items, props.setImage);\n    }\n\n    const dragOver = (event) => { event.preventDefault(); } // Need this for the drop to work\n\n    return(\n        <div\n            className='dropzone'\n            onDragOver={dragOver}\n            onDrop={dropHandler}>\n                {props.render() ? null : 'Paste text from clipboard or drag and drop here'}\n                <img src={props.render()} alt=''/>\n        </div>\n    );\n}\n\nexport default Dropzone;\n","import Tesseract from 'tesseract.js'\r\nimport Jimp from 'jimp';\r\n\r\n// increase image size\r\n// double size for now. work on resizing by a factor later\r\nexport async function enlargeImage(buffer){\r\n    try{\r\n        var image = await Jimp.read(buffer);\r\n        const fx = image.bitmap.width * 2,\r\n            fy = image.bitmap.height * 2;\r\n        console.log(image);\r\n        image.resize(fx, fy, Jimp.RESIZE_BICUBIC);\r\n        //var uri = image.write(\"./temp\", error => console.error(error));\r\n        const base64 = await image.getBase64Async(Jimp.AUTO);\r\n        const buff = await image.getBufferAsync(Jimp.AUTO);\r\n\r\n        return {buff, base64};\r\n    }\r\n    catch(error){\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nexport async function gaussianBlur(buffer){\r\n    try{\r\n\r\n    }\r\n    catch(error){\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nexport async function recognize(base64){\r\n    console.log('processing...');\r\n    var data = await Tesseract.recognize(base64, 'jpn');\r\n    console.log(data);\r\n    console.log(data.data.text);\r\n    return data.data.text;\r\n}\r\n\r\n","import {useState, useEffect} from 'react';\r\nimport Button from './Button.js';\r\nimport Dropzone from './Dropzone.js';\r\nimport handleFiles from '../logic/handleFiles.js';\r\nimport {enlargeImage, recognize} from '../logic/processImage.js';\r\n\r\nfunction Imagebox(){\r\n    const [image, setImage] = useState({buff: null, base64: null}); // image metadata\r\n    const [text, setText] = useState('');\r\n\r\n    const handlePaste = (event) =>{\r\n        const items = event.clipboardData.items;\r\n        console.log(items);\r\n        handleFiles(items, setImage);\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('paste', handlePaste);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(image.base64){\r\n            setText('Loading...');\r\n\r\n            recognize(image.base64)\r\n                .then(text => {\r\n                    console.log(text);\r\n                    setText(text)\r\n                });\r\n        }\r\n    }, [image]);\r\n\r\n    const enlargeClick = async () => {\r\n        if(!image.buff)\r\n            return;\r\n        var newimage = await enlargeImage(image.buff);\r\n        console.log(newimage);\r\n        setImage(newimage);\r\n    };\r\n\r\n    return(\r\n        <>\r\n        {image.base64 ? undefined : 'no image'}\r\n        <Dropzone render={() => image.base64} setImage={(image) => setImage(image)}/>\r\n        <Button clickHandler={enlargeClick} text=\"Enlarge by x2\"/>\r\n        {text}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Imagebox;\r\n","import './App.css';\r\nimport Imagebox from './Imagebox.js'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Imagebox/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}