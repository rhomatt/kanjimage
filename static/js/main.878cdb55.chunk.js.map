{"version":3,"sources":["component/Button.js","logic/processImage.js","component/Imagebox.js","component/App.js","reportWebVitals.js","index.js"],"names":["Button","props","clickHandler","text","onClick","enlargeImage","buffer","a","Jimp","read","image","fx","bitmap","width","fy","height","console","log","resize","RESIZE_BICUBIC","getBase64Async","AUTO","base64","getBufferAsync","buff","error","Tesseract","recognize","data","Imagebox","useState","setImage","setText","pasteHandler","event","blob","items","clipboardData","i","length","item","type","getAsFile","reader","FileReader","onload","arrayBuffer","target","result","readAsDataURL","useEffect","document","addEventListener","then","enlargeClick","newimage","undefined","src","alt","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"yUAaeA,MAZf,SAAgBC,GAAO,IACZC,EAAsBD,EAAtBC,aAAcC,EAAQF,EAARE,KAErB,OACI,8BACA,wBAAQC,QAASF,EAAjB,SACCC,O,mCCFF,SAAeE,EAAtB,kC,4CAAO,WAA4BC,GAA5B,uBAAAC,EAAA,+EAEmBC,IAAKC,KAAKH,GAF7B,cAEKI,EAFL,OAGOC,EAA0B,EAArBD,EAAME,OAAOC,MACpBC,EAA2B,EAAtBJ,EAAME,OAAOG,OACtBC,QAAQC,IAAIP,GACZA,EAAMQ,OAAOP,EAAIG,EAAIN,IAAKW,gBAN3B,SAQsBT,EAAMU,eAAeZ,IAAKa,MARhD,cAQOC,EARP,iBASoBZ,EAAMa,eAAef,IAAKa,MAT9C,eASOG,EATP,yBAWQ,CAACA,OAAMF,WAXf,kCAcCN,QAAQS,MAAR,MAdD,2D,kEAkBA,WAAyBH,GAAzB,eAAAf,EAAA,6DACHS,QAAQC,IAAI,iBADT,SAEcS,IAAUC,UAAUL,EAAQ,OAF1C,cAECM,EAFD,OAGHZ,QAAQC,IAAIW,GACZZ,QAAQC,IAAIW,EAAKA,KAAKzB,MAJnB,kBAKIyB,EAAKA,KAAKzB,MALd,4C,sBC6CQ0B,MA3Df,WAAoB,IAAD,EACWC,mBAAS,CAACN,KAAM,KAAMF,OAAQ,OADzC,mBACRZ,EADQ,KACDqB,EADC,OAESD,mBAAS,IAFlB,mBAER3B,EAFQ,KAEF6B,EAFE,KAITC,EAAe,SAACC,GAIlB,IAHA,IAEIC,EAFEC,EAAQF,EAAMG,cAAcD,MAG1BE,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAAI,CACjC,IAAIE,EAAOJ,EAAME,GAEjB,GAAiB,cAAdE,EAAKC,KAAqB,CACzBN,EAAOK,EAAKE,YACZ,OAIR,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,OAAP,uCAAgB,WAAMX,GAAN,eAAA3B,EAAA,sEACO4B,EAAKW,cADZ,OACNtB,EADM,OAEZO,EAAS,CAACP,OAAMF,OAAQY,EAAMa,OAAOC,SAFzB,2CAAhB,sDAKGb,GACCQ,EAAOM,cAAcd,IAI7Be,qBAAU,WACNC,SAASC,iBAAiB,QAASnB,KACpC,IAEHiB,qBAAU,WACHxC,EAAMY,QDnBV,SAAP,kCCoBYK,CAAUjB,EAAMY,QACX+B,MAAK,SAAAlD,GACFa,QAAQC,IAAId,GACZ6B,EAAQ7B,QAErB,CAACO,IAEJ,IAAM4C,EAAY,uCAAG,4BAAA/C,EAAA,yDACbG,EAAMc,KADO,iEAGInB,EAAaK,EAAMc,MAHvB,OAGb+B,EAHa,OAIjBvC,QAAQC,IAAIsC,GACZxB,EAASwB,GALQ,2CAAH,qDAQlB,OACI,qCACC7C,EAAMY,YAASkC,EAAY,WAC5B,qBAAKC,IAAK/C,EAAMY,OAAQoC,IAAI,KAC5B,cAAC,EAAD,CAAQxD,aAAcoD,EAAcnD,KAAK,YACxCA,MCpDMwD,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACI,cAAC,EAAD,OCMOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpB,SAASqB,eAAe,SAM1BX,M","file":"static/js/main.878cdb55.chunk.js","sourcesContent":["\nfunction Button(props){\n    const {clickHandler, text} = props;\n\n    return(\n        <div>\n        <button onClick={clickHandler}>\n        {text}\n        </button>\n        </div>\n    );\n}\n\nexport default Button;\n","import Tesseract from 'tesseract.js'\nimport Jimp from 'jimp';\n\n// increase image size\n// double size for now. work on resizing by a factor later\nexport async function enlargeImage(buffer){\n    try{\n        var image = await Jimp.read(buffer);\n        const fx = image.bitmap.width * 2,\n            fy = image.bitmap.height * 2;\n        console.log(image);\n        image.resize(fx, fy, Jimp.RESIZE_BICUBIC);\n        //var uri = image.write(\"./temp\", error => console.error(error));\n        const base64 = await image.getBase64Async(Jimp.AUTO);\n        const buff = await image.getBufferAsync(Jimp.AUTO);\n\n        return {buff, base64};\n    }\n    catch(error){\n        console.error(error);\n    }\n}\n\nexport async function recognize(base64){\n    console.log('processing...');\n    var data = await Tesseract.recognize(base64, 'jpn');\n    console.log(data);\n    console.log(data.data.text);\n    return data.data.text;\n}\n\n","import {useState, useEffect} from 'react';\nimport Button from './Button.js';\nimport {enlargeImage, recognize} from '../logic/processImage.js';\n\n// here for reference. Delete later\n// function Image(props){\n//     return <img src={props.render()}/>\n// }\n\nfunction Imagebox(){\n    const [image, setImage] = useState({buff: null, base64: null}); // image metadata\n    const [text, setText] = useState('');\n\n    const pasteHandler = (event) => {\n        const items = event.clipboardData.items;\n\n        var blob;\n        for(var i = 0; i < items.length; i++){ // get the first image\n            let item = items[i];\n            //console.log(item);\n            if(item.type === 'image/png'){\n                blob = item.getAsFile();\n                break;\n            }\n        }\n\n        var reader = new FileReader();\n        reader.onload = async event => {\n            const buff = await blob.arrayBuffer();\n            setImage({buff, base64: event.target.result})\n        };\n\n        if(blob) // should be null if not an image\n            reader.readAsDataURL(blob);\n\n    };\n\n    useEffect(() => {\n        document.addEventListener('paste', pasteHandler);\n    }, []);\n\n    useEffect(() => {\n        if(image.base64)\n            recognize(image.base64)\n                .then(text => {\n                    console.log(text);\n                    setText(text)\n                });\n    }, [image]);\n\n    const enlargeClick = async () => {\n        if(!image.buff)\n            return;\n        var newimage = await enlargeImage(image.buff);\n        console.log(newimage);\n        setImage(newimage);\n    };\n\n    return(\n        <>\n        {image.base64 ? undefined : 'no image'}\n        <img src={image.base64} alt=''/>\n        <Button clickHandler={enlargeClick} text=\"Enlarge\"/>\n        {text}\n        </>\n    );\n}\n\nexport default Imagebox;\n","import './App.css';\r\nimport Imagebox from './Imagebox.js'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Imagebox/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}