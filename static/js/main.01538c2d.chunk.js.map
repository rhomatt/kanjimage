{"version":3,"sources":["component/Button.js","component/RangeSlider.js","logic/handleFiles.js","component/Dropzone.js","logic/processImage.js","component/Imagebox.js","component/App.js","reportWebVitals.js","index.js"],"names":["Button","props","clickHandler","text","onClick","RangeSlider","min","max","value","slideHandler","className","type","onInput","handleFiles","items","setImage","blob","i","length","item","console","log","match","getAsFile","reader","FileReader","onload","event","a","arrayBuffer","buff","base64","target","result","readAsDataURL","Dropzone","onDragOver","preventDefault","onDrop","dataTransfer","render","id","src","alt","Lena","require","processImage","buffer","Jimp","read","image","fx","bitmap","width","fy","height","resize","RESIZE_BICUBIC","getBase64Async","AUTO","getBufferAsync","error","gaussian","radius","blur","element","amt","canvas","document","createElement","filter","pixels","filterImage","toDataURL","blobber","Promise","resolve","reject","toBlob","Tesseract","recognize","data","Imagebox","useState","setText","threshold","setThreshold","handlePaste","clipboardData","useEffect","addEventListener","PI","then","enlargeClick","enlargeImage","newimage","blurClick","thresholdClick","getElementById","undefined","parseInt","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.01538c2d.chunk.js","sourcesContent":["\nfunction Button(props){\n    const {clickHandler, text} = props;\n\n    return(\n        <div>\n        <button onClick={clickHandler}>\n        {text}\n        </button>\n        </div>\n    );\n}\n\nexport default Button;\n","\nfunction RangeSlider(props){\n    const {min, max, value, slideHandler} = props;\n    return(\n        <>\n        <input className=\"slider\" type=\"range\" min={min} max={max} onInput={slideHandler}/>\n        {value}\n        </>\n    );\n}\n\nexport default RangeSlider;\n","\r\nconst handleFiles = (items, setImage) => {\r\n    var blob;\r\n    for(var i = 0; i < items.length; i++){ // get the first image\r\n        let item = items[i];\r\n        console.log(item);\r\n        if(item.type.match(/image\\/.*/)){\r\n            blob = item.getAsFile();\r\n            break;\r\n        }\r\n    }\r\n\r\n    var reader = new FileReader();\r\n    reader.onload = async event => {\r\n        const buff = await blob.arrayBuffer();\r\n        setImage({buff, base64: event.target.result})\r\n    };\r\n\r\n    if(blob) // should be null if not an image\r\n        reader.readAsDataURL(blob);\r\n}\r\n\r\nexport default handleFiles;\r\n","import './Dropzone.css';\nimport handleFiles from '../logic/handleFiles.js';\n\nfunction Dropzone(props){\n    const dropHandler = (event) => {\n        console.log('File dropped');\n        event.preventDefault();\n        const items = event.dataTransfer.items;\n\n        handleFiles(items, props.setImage);\n    }\n\n    const dragOver = (event) => { event.preventDefault(); } // Need this for the drop to work\n\n    // img must have id to be able to pass document element to LenaJS\n    return(\n        <div\n            className='dropzone'\n            onDragOver={dragOver}\n            onDrop={dropHandler}>\n                {props.render() ? null : 'Paste image from clipboard or drag and drop here'}\n                <img id=\"image\" src={props.render()} alt=''/>\n        </div>\n    );\n}\n\nexport default Dropzone;\n","import Tesseract from 'tesseract.js'\r\nimport Jimp from 'jimp';\r\nconst Lena = require('lena.js');\r\n\r\nvar processImage = {};\r\n\r\n// increase image size\r\n// double size for now. work on resizing by a factor later\r\nprocessImage[\"enlargeImage\"] = async function(buffer){\r\n    try{\r\n        var image = await Jimp.read(buffer);\r\n        const fx = image.bitmap.width * 2,\r\n            fy = image.bitmap.height * 2;\r\n        console.log(image);\r\n        image.resize(fx, fy, Jimp.RESIZE_BICUBIC);\r\n        //var uri = image.write(\"./temp\", error => console.error(error));\r\n        const base64 = await image.getBase64Async(Jimp.AUTO);\r\n        const buff = await image.getBufferAsync(Jimp.AUTO);\r\n\r\n        return {buff, base64};\r\n    }\r\n    catch(error){\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nprocessImage[\"blur\"] = async function(buffer, gaussian){\r\n    const radius = 1;\r\n    try{\r\n        var image = await Jimp.read(buffer);\r\n        if(gaussian)\r\n            image.gaussian(radius);\r\n        else\r\n            image.blur(radius);\r\n\r\n        const base64 = await image.getBase64Async(Jimp.AUTO);\r\n        const buff = await image.getBufferAsync(Jimp.AUTO);\r\n\r\n        return {buff, base64};\r\n    }\r\n    catch(error){\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n// must be passed a document element\r\n// there is probably a better way to do this\r\nprocessImage[\"threshold\"] = async function(element, amt=128){\r\n    var canvas = document.createElement(\"canvas\");\r\n    console.log(canvas);\r\n    const filter = (pixels) => Lena[\"thresholding\"](pixels, amt);\r\n\r\n    Lena.filterImage(canvas, filter, element);\r\n    const base64 = canvas.toDataURL(\"image/png\");\r\n\r\n    // if I don't wrap this thing in a promise it refuses to work\r\n    const blobber = new Promise((resolve, reject) => {\r\n        canvas.toBlob(blob => {\r\n            console.log(1, blob);\r\n            resolve(blob);\r\n        });\r\n    });\r\n\r\n    const blob = await blobber;\r\n\r\n    console.log(2, blob);\r\n    const buff = await blob.arrayBuffer();\r\n\r\n    return {buff, base64};\r\n}\r\n\r\nprocessImage[\"recognize\"] = async function(base64){\r\n    console.log('processing...');\r\n    var data = await Tesseract.recognize(base64, 'jpn');\r\n    console.log(data);\r\n    console.log(data.data.text);\r\n    return data.data.text;\r\n}\r\n\r\nexport default processImage;\r\n","import {useState, useEffect} from 'react';\r\nimport Button from './Button.js';\r\nimport RangeSlider from './RangeSlider.js';\r\nimport Dropzone from './Dropzone.js';\r\nimport handleFiles from '../logic/handleFiles.js';\r\nimport PI from '../logic/processImage.js';\r\n\r\nfunction Imagebox(){\r\n    const [image, setImage] = useState({buff: null, base64: null}); // image metadata\r\n    const [text, setText] = useState('');\r\n    const [threshold, setThreshold] = useState(128); // threshold amount for black/white\r\n\r\n    const handlePaste = (event) =>{\r\n        const items = event.clipboardData.items;\r\n        console.log(items);\r\n        handleFiles(items, setImage);\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('paste', handlePaste);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(image.base64){\r\n            setText('Loading...');\r\n\r\n            PI.recognize(image.base64)\r\n                .then(text => {\r\n                    console.log(text);\r\n                    setText(text)\r\n                });\r\n        }\r\n    }, [image]);\r\n\r\n    const enlargeClick = async () => {\r\n        if(!image.buff)\r\n            return;\r\n        var newimage = await PI.enlargeImage(image.buff);\r\n        setImage(newimage);\r\n    };\r\n\r\n    const blurClick = async () => {\r\n        if(!image.buff)\r\n            return;\r\n        var newimage = await PI.blur(image.buff, true);\r\n        setImage(newimage);\r\n    }\r\n\r\n    const thresholdClick = async () => {\r\n        const image = document.getElementById(\"image\");\r\n        var newimage = await PI.threshold(image, threshold);\r\n        console.log('newimage', newimage);\r\n        setImage(newimage);\r\n    }\r\n\r\n    const slideHandler = (event) => {\r\n        setThreshold(parseInt(event.target.value));\r\n    }\r\n\r\n    return(\r\n        <>\r\n        {image.base64 ? undefined : 'no image'}\r\n        <Dropzone render={() => image.base64} setImage={(image) => setImage(image)}/>\r\n        <Button clickHandler={enlargeClick} text=\"Enlarge by x2\"/>\r\n        <Button clickHandler={blurClick} text=\"Gausian blur\"/>\r\n        <RangeSlider min={0} max={255} value={threshold} slideHandler={slideHandler}/>\r\n        <Button clickHandler={thresholdClick} text=\"threshold\"/>\r\n        {text}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Imagebox;\r\n","import './App.css';\r\nimport Imagebox from './Imagebox.js'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Imagebox/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}